package de.ii.orchestrate.test;

import java.io.InputStream;
import java.util.Map;
import java.util.Objects;
import org.dotwebstack.orchestrate.ext.spatial.GeometryType;
import org.dotwebstack.orchestrate.model.Attribute;
import org.dotwebstack.orchestrate.model.Cardinality;
import org.dotwebstack.orchestrate.model.ComponentRegistry;
import org.dotwebstack.orchestrate.model.Model;
import org.dotwebstack.orchestrate.model.ModelMapping;
import org.dotwebstack.orchestrate.model.ObjectType;
import org.dotwebstack.orchestrate.model.ObjectTypeRef;
import org.dotwebstack.orchestrate.model.Relation;
import org.dotwebstack.orchestrate.model.combiners.Concat;
import org.dotwebstack.orchestrate.model.transforms.FunctionTransform;
import org.dotwebstack.orchestrate.model.transforms.TestPredicate;
import org.dotwebstack.orchestrate.model.types.ScalarTypes;
import org.dotwebstack.orchestrate.parser.yaml.YamlModelMappingParser;

final class TestFixtures {

  public enum TargetModelType {
    ADRES, CORE_LOCATION
  }

  public static Model SOURCE_MODEL_BAG = Model.builder()
      .alias("bag")
      .objectType(ObjectType.builder()
          .name("pand")
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("geometrie")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("oorspronkelijkBouwjaar")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Relation.builder()
              .name("bevat")
              .target(ObjectTypeRef.forType("verblijfsobject"))
              .cardinality(Cardinality.MULTI)
              .build())
          .build())
      .objectType(ObjectType.builder()
          .name("nummeraanduiding")
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("huisnummer")
              .type(ScalarTypes.INTEGER)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("huisnummertoevoeging")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .property(Attribute.builder()
              .name("huisletter")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .property(Attribute.builder()
              .name("postcode")
              .type(ScalarTypes.STRING)
              .build())
          .property(Attribute.builder()
              .name("typeadresseerbaarobject")
              .type(ScalarTypes.STRING)
              .build())
          .property(Relation.builder()
              .name("ligtAan")
              .target(ObjectTypeRef.forType("openbareruimte"))
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Relation.builder()
              .name("ligtIn")
              .target(ObjectTypeRef.forType("woonplaats"))
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .build())
      .objectType(ObjectType.builder()
          .name("openbareruimte")
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("naam")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("verkortenaam")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .property(Attribute.builder()
              .name("type")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Relation.builder()
              .name("ligtIn")
              .target(ObjectTypeRef.forType("woonplaats"))
              .cardinality(Cardinality.REQUIRED)
              .build())
          .build())
      .objectType(ObjectType.builder()
          .name("woonplaats")
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("naam")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .build())
      .objectType(ObjectType.builder()
          .name("verblijfsobject")
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("geometrie")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Relation.builder()
              .name("heeftAlsHoofdadres")
              .target(ObjectTypeRef.forType("nummeraanduiding"))
              .cardinality(Cardinality.REQUIRED)
              .inverseName("isHoofdadresVan")
              .inverseCardinality(Cardinality.REQUIRED)
              .build())
          .property(Relation.builder()
              .name("maaktDeelUitVan")
              .target(ObjectTypeRef.forType("pand"))
              .cardinality(Cardinality.of(1, Cardinality.INFINITE))
              //.inverseName("bevat")
              //.inverseCardinality(Cardinality.MULTI)
              .build())
          .build())
      .build();

  public static Model SOURCE_MODEL_BGT = Model.builder()
      .alias("bgt")
      .objectType(ObjectType.builder()
          .name("Pand")
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Relation.builder()
              .name("isGerelateerdAan")
              .target(ObjectTypeRef.forType("bag", "pand"))
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .property(Attribute.builder()
              .name("geometrie2d")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("bronhouder")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .build())
      .objectType(ObjectType.builder()
          .name("OverigBouwwerk")
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("geometrie2d")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("bronhouder")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("bgt-type")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .property(Attribute.builder()
              .name("plus-type")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .build())
      .objectType(ObjectType.builder()
          .name("GebouwInstallatie")
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("geometrie2d")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("bronhouder")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("bgt-type")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .property(Attribute.builder()
              .name("plus-type")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.OPTIONAL)
              .build())
          .build())
      .build();

  public static Model SOURCE_MODEL_PERCEEL = Model.builder()
      .alias("dkk")
      .objectType(ObjectType.builder()
          .name("perceel")
          .property(Attribute.builder()
              .name("lokaalID")
              .type(ScalarTypes.INTEGER)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("begrenzingPerceel")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("kadastraleGemeenteCode")
              .type(ScalarTypes.INTEGER)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("kadastraleGemeenteWaarde")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("sectie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("perceelnummer")
              .type(ScalarTypes.INTEGER)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .build())
      .build();

  public static Model SOURCE_MODEL_WATERSCHAP = Model.builder()
      .alias("tbd_1")
      .objectType(ObjectType.builder()
          .name("waterschap")
          .property(Attribute.builder()
              .name("localId")
              .type(ScalarTypes.INTEGER)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("geometry")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("text")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .build())
      .build();

  public static Model SOURCE_MODEL_BESTUURLIJKE_GEBIEDEN = Model.builder()
      .alias("tbd_2")
      .objectType(ObjectType.builder()
          .name("gemeentegebied")
          .property(Attribute.builder()
              .name("code")
              .type(ScalarTypes.INTEGER)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("geom")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("naam")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Relation.builder()
              .name("ligt_in_provincie")
              .target(ObjectTypeRef.forType("provinciegebied"))
              .cardinality(Cardinality.REQUIRED)
              .build())
          .build())
      .objectType(ObjectType.builder()
          .name("provinciegebied")
          .property(Attribute.builder()
              .name("code")
              .type(ScalarTypes.INTEGER)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("geom")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("naam")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Relation.builder()
              .name("ligt_in_land")
              .target(ObjectTypeRef.forType("landgebied"))
              .cardinality(Cardinality.REQUIRED)
              .build())
          .build())
      .objectType(ObjectType.builder()
          .name("landgebied")
          .property(Attribute.builder()
              .name("code")
              .type(ScalarTypes.INTEGER)
              .cardinality(Cardinality.REQUIRED)
              .identifier(true)
              .build())
          .property(Attribute.builder()
              .name("geom")
              .type(new GeometryType())
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("naam")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .property(Attribute.builder()
              .name("identificatie")
              .type(ScalarTypes.STRING)
              .cardinality(Cardinality.REQUIRED)
              .build())
          .build())
      .build();

  public static ModelMapping createModelMapping(TestFixtures.TargetModelType targetModelType, InputStream mappingInputStream) {
    Model targetModel = null;

    if (targetModelType == TestFixtures.TargetModelType.ADRES) {
      targetModel = buildTargetModel();
    } else if (targetModelType == TestFixtures.TargetModelType.CORE_LOCATION) {
      targetModel = buildCoreLocationTargetModel();
    }

    var componentRegistry = new ComponentRegistry()
        .registerTransform(TestPredicate.builder()
            .name("nonNull")
            .predicate(Objects::nonNull)
            .build())
        .registerTransform(FunctionTransform.builder()
            .name("toString")
            .function(Objects::toString)
            .build());

    var yamlMapper = YamlModelMappingParser.getInstance(Map.of("concat", Concat.class, "nonNull", TestPredicate.class),
        componentRegistry);

    var modelMapping = yamlMapper.parse(mappingInputStream);

    return modelMapping.toBuilder()
        .targetModel(targetModel)
        .sourceModel(SOURCE_MODEL_BAG)
        .sourceModel(SOURCE_MODEL_BGT)
        .build();
  }

  private static Model buildTargetModel() {
    return Model.builder()
        .objectType(ObjectType.builder()
            .name("Adres")
            .property(Attribute.builder()
                .name("identificatie")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .identifier(true)
                .build())
            .property(Attribute.builder()
                .name("domein")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
            .property(Attribute.builder()
                .name("omschrijving")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
            .property(Attribute.builder()
                .name("straatnaam")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
            .property(Attribute.builder()
                .name("huisnummer")
                .type(ScalarTypes.INTEGER)
                .cardinality(Cardinality.REQUIRED)
                .build())
            .property(Attribute.builder()
                .name("huisletter")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .property(Attribute.builder()
                .name("huisnummertoevoeging")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .property(Attribute.builder()
                .name("postcode")
                .type(ScalarTypes.STRING)
                .build())
            .property(Attribute.builder()
                .name("plaatsnaam")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
            .property(Attribute.builder()
                .name("isHoofdadres")
                .type(ScalarTypes.BOOLEAN)
                .cardinality(Cardinality.REQUIRED)
                .build())
            .build())
        .objectType(ObjectType.builder()
            .name("Gebouw")
            .property(Attribute.builder()
                .name("identificatie")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .identifier(true)
                .build())
            .property(Attribute.builder()
                .name("bovenaanzichtgeometrie")
                .type(new GeometryType())
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .property(Attribute.builder()
                .name("maaiveldgeometrie")
                .type(new GeometryType())
                .cardinality(Cardinality.OPTIONAL)
                .build())
            /*
            .property(Attribute.builder()
                .name("domein")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
            .property(Attribute.builder()
                .name("type")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
             */
            .property(Attribute.builder()
                .name("bouwjaar")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
            /*
            .property(Attribute.builder()
                .name("sloopjaar")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .property(Attribute.builder()
                .name("energielabel")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .property(Relation.builder()
                .name("perceel")
                .target(ObjectTypeRef.forType("Perceel"))
                .cardinality(Cardinality.MULTI)
                .build())
             */
            .property(Relation.builder()
                .name("heeftAlsAdres")
                .target(ObjectTypeRef.forType("Adres"))
                .cardinality(Cardinality.MULTI)
                .build())
            .build())
        .objectType(ObjectType.builder()
            .name("Gemeente")
            .property(Attribute.builder()
                .name("identificatie")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .identifier(true)
                .build())
            .property(Attribute.builder()
                .name("naam")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
            /*
            .property(Relation.builder()
                .name("adres")
                .target(ObjectTypeRef.forType("Adres"))
                .cardinality(Cardinality.MULTI)
                .build())
             */
            .build())
        .objectType(ObjectType.builder()
            .name("Perceel")
            .property(Attribute.builder()
                .name("identificatie")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .identifier(true)
                .build())
            .property(Relation.builder()
                .name("gemeente")
                .target(ObjectTypeRef.forType("Gemeente"))
                .cardinality(Cardinality.REQUIRED)
                .build())
            .property(Relation.builder()
                .name("waterschap")
                .target(ObjectTypeRef.forType("Waterschap"))
                .cardinality(Cardinality.REQUIRED)
                .build())
            .build())
        .objectType(ObjectType.builder()
            .name("Waterschap")
            .property(Attribute.builder()
                .name("identificatie")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .identifier(true)
                .build())
            .property(Attribute.builder()
                .name("naam")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
            .property(Relation.builder()
                .name("adres")
                .target(ObjectTypeRef.forType("Adres"))
                .cardinality(Cardinality.MULTI)
                .build())
            .build())
        .build();
  }

  private static Model buildCoreLocationTargetModel() {
    return Model.builder()
        .objectType(ObjectType.builder()
            .name("Address")
            .property(Attribute.builder()
                .name("_id")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.REQUIRED)
                .build())
//            .property(Attribute.builder()
//                .name("addressArea")
//                .type(ScalarTypes.STRING)
//                .cardinality(Cardinality.MULTI)
//                .build())
            .property(Attribute.builder()
                .name("addressID")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .identifier(true)
                .build())
//            .property(Attribute.builder()
//                .name("adminUnitL1")
//                .type(ScalarTypes.STRING)
//                .cardinality(Cardinality.MULTI)
//                .build())
//            .property(Attribute.builder()
//                .name("adminUnitL2")
//                .type(ScalarTypes.STRING)
//                .cardinality(Cardinality.MULTI)
//                .build())
            .property(Attribute.builder()
                .name("fullAddress")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .property(Attribute.builder()
                .name("locatorDesignator")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
//            .property(Attribute.builder()
//                .name("locatorName")
//                .type(ScalarTypes.STRING)
//                .cardinality(Cardinality.MULTI)
//                .build())
//            .property(Attribute.builder()
//                .name("poBox")
//                .type(ScalarTypes.STRING)
//                .cardinality(Cardinality.MULTI)
//                .build())
            .property(Attribute.builder()
                .name("postCode")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .property(Attribute.builder()
                .name("postName")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .property(Attribute.builder()
                .name("thoroughfare")
                .type(ScalarTypes.STRING)
                .cardinality(Cardinality.OPTIONAL)
                .build())
            .build())
        .build();
  }
}
